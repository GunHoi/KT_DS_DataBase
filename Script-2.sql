SELECT DEPARTMENT_ID
	 , DEPARTMENT_NAME 
	 , MANAGER_ID 
	 , LOCATION_ID 
  FROM DEPARTMENTS
 WHERE MANAGER_ID = 103
;

SELECT FIRST_NAME 
     , LAST_NAME 
  FROM EMPLOYEES
 WHERE MANAGER_ID = 103
 ORDER BY FIRST_NAME ASC
;

SELECT LAST_NAME 
  FROM EMPLOYEES
 WHERE FIRST_NAME = 'Steven'
 ORDER BY LAST_NAME DESC
;

SELECT CITY 
  FROM LOCATIONS
 WHERE COUNTRY_ID = 'US'
 ORDER BY CITY ASC
;

SELECT EMPLOYEE_ID 
     , FIRST_NAME 
     , SALARY 
  FROM EMPLOYEES
 WHERE SALARY BETWEEN 10000 AND 15000
 /*
 WHERE SALARY >= 10000 
   AND SALARY <= 15000
*/
 ORDER BY SALARY DESC
;

SELECT EMPLOYEE_ID 
     , FIRST_NAME 
     , MANAGER_ID 
     , COMMISSION_PCT 
  FROM EMPLOYEES
 WHERE COMMISSION_PCT IS NULL 
-- AND MANAGER_ID = 100
   AND MANAGER_ID IN 100
 ORDER BY EMPLOYEE_ID ASC
;

SELECT *
  FROM EMPLOYEES
 WHERE (JOB_ID = 'FI_MGR'
    OR JOB_ID = 'ST_MAN')
   AND SALARY <= 10000
 ORDER BY HIRE_DATE ASC
;

SELECT *
  FROM EMPLOYEES
 WHERE (FIRST_NAME = 'Bruce'
    OR LAST_NAME = 'Chen')
   AND JOB_ID = 'FI_ACCOUNT'
;

SELECT *
  FROM EMPLOYEES
 WHERE JOB_ID != 'FI_ACCOUNT'
;

SELECT *
  FROM EMPLOYEES
 WHERE JOB_ID IN ('FI_MGR', 'ST_MAN')
   AND SALARY <= 10000
 ORDER BY HIRE_DATE ASC 
;

SELECT *
  FROM EMPLOYEES
 WHERE JOB_ID != 'FI_MGR'
   AND JOB_ID != 'ST_MAN'
   AND SALARY <= 10000
 ORDER BY HIRE_DATE ASC 
;

SELECT *
  FROM EMPLOYEES
 WHERE JOB_ID NOT IN ('FI_MGR', 'ST_MAN')
   AND SALARY <= 10000
 ORDER BY HIRE_DATE ASC 
;

SELECT *
  FROM EMPLOYEES
 WHERE FIRST_NAME LIKE 'S%'
;

SELECT *
  FROM EMPLOYEES
 WHERE FIRST_NAME LIKE '%n'
;

SELECT *
  FROM EMPLOYEES
 WHERE FIRST_NAME LIKE 'S%n'
;

SELECT *
  FROM EMPLOYEES
 WHERE FIRST_NAME LIKE '%eve%'
;

SELECT *
  FROM EMPLOYEES
 WHERE FIRST_NAME LIKE '%Ste%'
;

SELECT *
  FROM EMPLOYEES
 WHERE PHONE_NUMBER LIKE '515.%'
 ORDER BY FIRST_NAME DESC 
;

SELECT *
  FROM EMPLOYEES
 WHERE JOB_ID LIKE '%PRES'
 ORDER BY LAST_NAME ASC 
;

SELECT DEPARTMENT_ID 
     , DEPARTMENT_NAME
  FROM DEPARTMENTS
 WHERE DEPARTMENT_NAME LIKE '%I%'
    OR DEPARTMENT_NAME LIKE '%i%'
 ORDER BY LOCATION_ID DESC
;

SELECT DEPARTMENT_NAME
  FROM DEPARTMENTS
 WHERE DEPARTMENT_NAME NOT LIKE '%IT%'
 ORDER BY DEPARTMENT_NAME DESC
;

SELECT DEPARTMENT_NAME
  FROM DEPARTMENTS
 WHERE DEPARTMENT_NAME LIKE '%Co%'
   AND DEPARTMENT_NAME NOT LIKE '%T%'
;

SELECT *
  FROM EMPLOYEES
 WHERE FIRST_NAME LIKE '___'
;

SELECT *
  FROM EMPLOYEES
 WHERE FIRST_NAME LIKE '____d'
;

SELECT *
  FROM EMPLOYEES
 WHERE LAST_NAME LIKE '_e%'
;

SELECT JOB_ID
     , COUNT(1)
  FROM EMPLOYEES
 GROUP BY JOB_ID
;

SELECT DEPARTMENT_ID
     , COUNT(1)
  FROM EMPLOYEES
 GROUP BY DEPARTMENT_ID
;

SELECT SUM(SALARY)
  FROM EMPLOYEES
;

SELECT DEPARTMENT_ID
     , SUM(SALARY) AS "연봉의 합"
  FROM EMPLOYEES
 GROUP BY DEPARTMENT_ID
;

SELECT JOB_ID
     , SUM(SALARY) AS "연봉의 합"
  FROM EMPLOYEES
 GROUP BY JOB_ID
;

SELECT DEPARTMENT_ID
     , JOB_ID
     , SUM(SALARY) AS "연봉의 합"
  FROM EMPLOYEES
 GROUP BY DEPARTMENT_ID
     , JOB_ID
;

SELECT DEPARTMENT_ID
     , MAX(SALARY) AS "최고 연봉"
  FROM EMPLOYEES
 GROUP BY DEPARTMENT_ID
;

SELECT JOB_ID
     , MIN(SALARY) AS "최저 연봉"
  FROM EMPLOYEES
 GROUP BY JOB_ID
;

SELECT DEPARTMENT_ID
     , JOB_ID
     , MAX(SALARY) AS "최고 연봉"
  FROM EMPLOYEES
 GROUP BY DEPARTMENT_ID
     , JOB_ID 
;

SELECT MAX(SALARY) AS "최고 연봉"
     , MIN(SALARY) AS "최저 연봉"
     , AVG(SALARY) AS "평균 연봉"
     , SUM(SALARY) AS "연봉의 합"
  FROM EMPLOYEES
;

SELECT DEPARTMENT_ID
	 , COUNT(1) AS "데이터의 수"
	 , MAX(SALARY) AS "최고 연봉"
	 , MIN(SALARY) AS "최저 연봉"
	 , AVG(SALARY) AS "평균 연봉"
	 , SUM(SALARY) AS "연봉의 합"
  FROM EMPLOYEES
 GROUP BY DEPARTMENT_ID
;

SELECT MANAGER_ID
     , COUNT(1)
     , MAX(SALARY)
     , MIN(SALARY)
     , AVG(SALARY)
     , SUM(SALARY)
  FROM EMPLOYEES
 GROUP BY MANAGER_ID
;

SELECT DEPARTMENT_ID
     , MAX(SALARY)
     , MIN(SALARY)
     , AVG(SALARY)
  FROM EMPLOYEES
 WHERE JOB_ID != 'SA_REP'
 GROUP BY DEPARTMENT_ID 
;

SELECT DEPARTMENT_ID 
     , COUNT(1) AS "데이터 수"
  FROM EMPLOYEES
 GROUP BY DEPARTMENT_ID
 HAVING COUNT(1)  >= 3
;

SELECT MANAGER_ID AS "상사의 번호"
     , COUNT(1) AS "부하직원의 수"
  FROM EMPLOYEES
 GROUP BY MANAGER_ID
HAVING COUNT(1) >= 2
;

SELECT JOB_ID
     , AVG(SALARY)
     , MAX(SALARY)
     , MIN(SALARY)
  FROM EMPLOYEES
 GROUP BY JOB_ID
HAVING AVG(SALARY) >= 7000
 ORDER BY AVG(SALARY) ASC
;

SELECT DEPARTMENT_ID
     , COUNT(1)
     , AVG(SALARY)
     , MAX(SALARY)
     , MIN(SALARY)
  FROM EMPLOYEES
 GROUP BY DEPARTMENT_ID
HAVING COUNT(1) >= 3
   AND AVG(SALARY) >= 5000
;

-- 최저 연봉보다 많이 받는 사원들의 모든 정보를 조회
SELECT *
  FROM EMPLOYEES
 WHERE SALARY > (SELECT MIN(SALARY)
                    FROM EMPLOYEES)
;
-- 평균 연봉보다 많이 받는 사원들의 모든 정보를 조회
SELECT *
  FROM EMPLOYEES
 WHERE SALARY > (SELECT AVG(SALARY)
 				   FROM EMPLOYEES)
 ;
-- EMPLOYEES 테이블에서 FIRST_NAME은 Steven LAST_NAME은 King을 MANAGER_ID로 두고있는 모든 데이터를 조회한다.
SELECT *
  FROM EMPLOYEES
 WHERE MANAGER_ID = (SELECT EMPLOYEE_ID
 		  			   FROM EMPLOYEES
 		 			  WHERE FIRST_NAME = 'Steven'
 		   				AND LAST_NAME = 'King')
;
/*
 * EMPLOYEES 테이블에서 EMPLOYEE_ID 가 102번인 사원의 연봉과
 * 동일한 연봉을 받는 모든 사원의 정보를 조회한다.
 * 단, 102번은 조회에서 제외한다.
 */
SELECT *
  FROM EMPLOYEES
 WHERE SALARY = (SELECT SALARY
 				   FROM EMPLOYEES
 				  WHERE EMPLOYEE_ID = 102)
   AND EMPLOYEE_ID != 102
;
/*
 * EMPLOYEES 테이블에서 EMPLOYEE_ID 가 113번인 사원과 동일한 DEPARTMENT_ID를 가지는 모든 사원의 정보를 출력한다.
 * 단, 113번은 조회에서 제외한다.
 */
SELECT *
  FROM EMPLOYEES
 WHERE DEPARTMENT_ID  = (SELECT DEPARTMENT_ID 
 						   FROM EMPLOYEES
 						  WHERE EMPLOYEE_ID	= 113)
   AND EMPLOYEE_ID != 113
;

/* EMPLOYEES 테이블에서
 * (EMPLOYEE_ID 가 115번인) 데이터의 JOB_ID와
 * 같은 JOB_ID를 가진 데이터를 모두 조회한다.
 * 단, 115번은 조회에서 제외한다.
 */

SELECT *
  FROM EMPLOYEES
 WHERE JOB_ID = (SELECT JOB_ID
 				   FROM EMPLOYEES
 				  WHERE EMPLOYEE_ID = 115)
   AND EMPLOYEE_ID != 115
;

/*
 * EMPLOYEES 테이블에서 (FIRST_NAME 이 J로 시작하는 데이터의 JOB_ID)와
 * 같은 JOB_ID를 가진 데이터를 모두 조회한다.
 */
SELECT *
  FROM EMPLOYEES
 WHERE JOB_ID IN (SELECT JOB_ID
 				   FROM EMPLOYEES
 				  WHERE FIRST_NAME LIKE 'J%')
;

/*
 * EMPLOYEES 테이블에서 (EMPLOYEE_ID가 116번, 201번의 데이터의 SALARY)와
 * 같은 SALARY를 가진 데이터를 모두 조회한다.
 * 단, 116번과 201번은 조회에서 제외한다.
 */
SELECT *
  FROM EMPLOYEES
 WHERE SALARY IN (SELECT SALARY
                    FROM EMPLOYEES
                   WHERE EMPLOYEE_ID IN (116, 201))
   AND EMPLOYEE_ID NOT IN (116, 201)
;

/*
 * EMPLOYEE 테이블에서 (EMPLOYEE_ID가 103번, 206, 115번의 데이터의 MANAGER_ID)와
 * 같은 MANAGER_ID를 가진 데이터를 모두 조회한다.
 * 단, 103번, 206번, 115번은 조회에서 제외한다.
 */
SELECT *
  FROM EMPLOYEES
 WHERE MANAGER_ID IN (SELECT MANAGER_ID
 					    FROM EMPLOYEES
 					   WHERE EMPLOYEE_ID IN (103, 206, 115))
   AND EMPLOYEE_ID NOT IN (103, 206, 115)
;